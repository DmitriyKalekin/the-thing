from app.card import Card
import asyncio
import uuid
# import inspect
# from board import Board
# import random
# from emoji import emojize


class Player:
    """
    """

    # Player side CONSTS
    GOOD = 0
    EVIL = 1
    BAD = 2   

    def __init__(self, hand, board, player_info: dict):
        self.title_message_id = None
        self.table_message_id = None
        self.panel_message_id = None
        self.hand_slots = []
        self.log_message_id = None
        self.global_log = []
        self.local_log = []

        self.user_id = player_info["user_id"]
        self.group_chat_id = player_info["group_chat_id"]
        self.name = player_info["user_fullname"]
        self.user_fullname = player_info["user_fullname"]
        self.user_alert = player_info["user_alert"] 
        self.uuid = str(uuid.uuid4())
        self.hand = hand
        self.board = board
        self.game = None
        self.side = Player.GOOD
        self.update_player_side()
        self.avatar = "üò∫"
        self.set_avatar()
        self.view = None

    def __repr__(self):
        return "<Player: %s, user_id=%s, uuid=%s>" % (self.user_fullname, self.user_id, self.uuid)  # self.__dict__           

    def init(self, view, game):
        self.view = view
        self.game = game

    def set_avatar(self):
        avatars = {
            "Yulia Reznikova": "üë©",
            "–î–∂–∞–º—à–∏–¥ –î–∂—É—Ä–∞–µ–≤": "üë±Ô∏è",
            "Anton Mozgovoy": "üë®",
            "Tanya Tanya": "üë©",
            "–ú–∞—Ä—Å–µ–ª—å –ì–∏–∑–∑–∞—Ç–æ–≤": "üë®",
            "Sergey Saltovskiy": "üë®",
            "Zair Ognev": "üë®",
            "Olga Deribo": "üë©", 
            "–î–º–∏—Ç—Ä–∏–π –ö–∞–ª–µ–∫–∏–Ω": "üë®",
            "Igor": "üë®",
            "–ê–Ω—Ç–æ–Ω –ú–∞–∫–∞—Ä–æ—á–∫–∏–Ω": "üë®",
            "Sergey Evseenko": "üë®",
            "Zag": "üë®",
            "–ê–Ω—Ç–æ–Ω –ê—Ä—Ç—é–∫–æ–≤": "üë®",
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏—Ü–∞–π": "üë∂",
            "Dmitriy Zaytsev": "üë®"
        }
        ava = avatars.get(self.user_fullname, "üò∫")
        if self.side == Player.EVIL:
            ava = "üëæ"
        self.avatar = ava
        return

    async def phase1(self) -> bool:
        """
        –§–∞–∑–∞ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∏ –∏–≥—Ä—ã –ø–∞–Ω–∏–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–¥
        """
        # p.global_log = "—Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É —Å –∫–æ–ª–æ–¥—ã..."
        # await self.show_table_to_all()
        # await self.show_log_to_all(f"–§–∞–∑–∞ 1. {p.user_fullname} —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É —Å –∫–æ–ª–æ–¥—ã")
        card = self.pull_deck()
        assert type(card) == Card
        if card.is_panic():
            self.play_panic(card)
            self.board.deck.append(card)  # –∫–∞—Ä—Ç–∞ –ø–∞–Ω–∏–∫–∏ —É—à–ª–∞ –≤ –∫–æ–ª–æ–¥—É
            return False
        else:
            await self.take_on_hand(card)
            return True   
        return True

    async def phase2_prepare(self):
        self.local_log.append(f"‚ùóÔ∏è –°—ã–≥—Ä–∞–π—Ç–µ ‚ñ∂Ô∏è –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ üóë –∫–∞—Ä—Ç—É...")
        self.global_log.append(f"üÉè –ò–≥—Ä–∞–µ—Ç –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç...")
        await asyncio.gather(*[
            self.view.show_play_drop_options(self),
            self.view.show_table_to_all()
        ])

    async def phase2_end(self):
        await asyncio.gather(*[
            self.view.show_cards(self),
            self.view.show_table_to_all()
        ])

    async def phase2(self):
        """
        –§–∞–∑–∞ —Å–±—Ä–æ—Å–∞ –∏–ª–∏ –∏–≥—Ä—ã –∫–∞—Ä—Ç—ã —Å —Ä—É–∫–∏
        """
        cmd, card_uuid = await self.game.input(self)
        assert cmd in ["phase2:play_card", "phase2:drop_card"]
        card = self.pop_card_by_uuid(int(card_uuid))  # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
        assert type(card) == Card
        if cmd == "phase2:play_card":
            if Card.PLAY_PERSON in card.__dict__:
                await self.view.show_player_target(self, card)
                cmd, p_uuid = await self.game.input(self)
                assert cmd == "phase2:play_card/player"
                self.play_card(card, target=self.board.player_by_uuid(p_uuid))
            else:
                self.play_card(card, target=None)
            self.board.deck.append(card)
        else:
            assert cmd == "phase2:drop_card"
            self.drop_card(card)
        return

    async def phase3_prepare(self, next_player: "Player"):
        self.local_log.append(f"‚ùóÔ∏è –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è *{next_player.user_fullname}*")
        self.global_log.append(f"üí§ –ü–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç—É –¥–ª—è {next_player.user_fullname}")

        next_player.local_log.append(f"‚ùóÔ∏è –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è *{self.user_fullname}*, –ª–∏–±–æ –∑–∞—â–∏—Ç–∏—Ç–µ—Å—å üõ° –æ—Ç –æ–±–º–µ–Ω–∞.")
        next_player.global_log.append(f"üí§ –ü–µ—Ä–µ–¥–∞—ë—Ç –∫–∞—Ä—Ç—É –¥–ª—è {self.user_fullname}")

        await asyncio.gather(*[
            self.view.show_give_options(self, next_player),
            self.view.show_give_options(next_player, self, can_def=True),
            self.view.show_table_to_all()
        ])

    async def phase3(self, next_player: "Player"):
        exchangers = await asyncio.gather(*[
            self.proccess_exchange(next_player),
            next_player.proccess_exchange(self)
        ])
        p1, card1 = exchangers[0]
        p2, card2 = exchangers[1]
        assert type(p1) == Player
        assert type(p2) == Player
        assert type(card1) == Card
        assert type(card2) == Card
        await asyncio.gather(*[
            p1.take_on_hand(card2, sender=p2),
            p2.take_on_hand(card1, sender=p1)
        ])
        return

    async def proccess_exchange(self, next_player: "Player"):
        cmd, card_uuid = await self.game.input(self)
        # BUG: assertion error here
        assert cmd in ["phase3:give_card", "phase3:block_exchange_card"]
        my_card = self.pop_card_by_uuid(int(card_uuid))
        assert type(my_card) == Card

        if cmd == "phase3:give_card":
            self.local_log[-1] = f"üéÅ –æ—Ç–¥–∞–Ω–∞ `{my_card.name}` –¥–ª—è *{next_player.user_fullname}*"        
            self.global_log[-1] = f"‚ô£Ô∏è –û—Ç–¥–∞–ª –∫–∞—Ä—Ç—É –¥–ª—è {next_player.user_fullname}"
        else:
            assert cmd == "phase3:block_exchange_card"
            self.local_log[-1] = f"üõ° —Å—ã–≥—Ä–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ `{my_card.name}` –æ—Ç *{next_player.user_fullname}*"        
            self.global_log[-1] = f"üõ° –ó–∞—â–∏—Ç–∏–ª—Å—è `{my_card.name}` –æ—Ç –æ–±–º–µ–Ω–∞ —Å {next_player.user_fullname}"
        return self, my_card

    def update_player_side(self):
        for c in self.hand:
            if c.is_evil():
                self.side = Player.EVIL

    def get_cards_names(self):
        return [c.name for c in self.hand]

    def get_possible_play(self):
        result = []
        for c in self.hand:
            if c.is_playable() and c.role not in [_.role for _ in result]:
                result.append(c)
        return result

    def cnt_infection(self):
        cnt = 0
        for c in self.hand:
            if c.is_infection():
                cnt += 1
        return cnt

    def is_fully_infected(self):
        kill_em = True
        for c in self.hand:
            if not c.is_infection():
                kill_em = False
                break
        return kill_em

    def is_quarantined(self):
        return False

    def get_possible_drop(self):
        result = []
        for c in self.hand:
            # –∏–º–µ–Ω–Ω–æ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–ª—å–∑—è —Å–∫–∏–¥—ã–≤–∞—Ç—å - —Ç.–µ. –æ–¥–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ —Ä—É–∫–µ
            if self.is_infected() and self.cnt_infection() == 1 and c.is_infection():
                continue
            if c.role not in [*[_.role for _ in result], Card.ROLE_EVIL]:
                result.append(c)
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–∫–∏–¥—ã–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        # —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Ä—É–∫–µ - –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
        if not self.is_evil() and len(self.hand) == 5 and self.cnt_infection() == 4:
            return [next(c for c in result if c.is_infection())]
        return result        

    def get_possible_give(self, receiver: "Player"):
        wrong_cards = [Card.ROLE_EVIL]
        if self.is_good():
            wrong_cards.append(Card.ROLE_INFECTION)
        if self.is_infected() and not receiver.is_evil():
            wrong_cards.append(Card.ROLE_INFECTION)
        if self.is_infected() and receiver.is_evil() and self.cnt_infection() == 1:
            wrong_cards.append(Card.ROLE_INFECTION)

        result = []
        for c in self.hand:
            if c.role not in [*[_.role for _ in result], *wrong_cards]:
                result.append(c)               
        return result

    def get_possible_block_exchange(self):
        result = []
        for c in self.hand:
            if c.role not in [_.role for _ in result] and c.is_def_exchange():
                result.append(c)               
        return result

    def search_card_index(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                return i
        # raise Warning(f"Card with index {uuid} not found in hand of {self.name}")
        return None

    def get_card_by_uuid(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                return c
        return None

    def pop_card_by_uuid(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                # for j, s in enumerate(self.hand_slots):
                #     if s["card"] and s["card"].uuid == c.uuid:
                #         assert type(s["card"]) == Card
                #         self.hand_slots[j]["card"] = None
                return self.hand.pop(i)
        return None        

    def is_good(self):
        return self.side == Player.GOOD

    def is_evil(self):
        return self.side == Player.EVIL

    def is_infected(self):
        return self.side == Player.BAD 

    def become_infected(self):
        print(f"{self.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")
        self.side = Player.BAD       

    def become_evil(self):
        self.side = Player.EVIL

    def pull_deck(self) -> Card:
        return self.board.deck.pop(0)   

    async def take_on_hand(self, card, sender=None):
        self.hand.append(card)
        if not sender:
            self.local_log.append(f"üé≤ —Å–æ–±—ã—Ç–∏–µ `{card.name}` c –∫–æ–ª–æ–¥—ã")
            self.global_log.append(f"üé≤ –í—ã—Ç—è–Ω—É–ª —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–æ–ª–æ–¥—ã")        

        if sender and sender.is_evil() and card.role == Card.ROLE_INFECTION and not self.is_evil():
            self.become_infected()

        if sender:
            self.local_log.append(f"ü§≤ –ø–æ–ª—É—á–µ–Ω–∞ `{card.name}` –æ—Ç *{sender.user_fullname}*")
            sender.global_log[-1] = f"üëåüèª –ü–µ—Ä–µ–¥–∞–ª –∫–∞—Ä—Ç—É {self.user_fullname}"
        # for j, s in enumerate(self.hand_slots):
        #     if not s["card"]:
        #         self.hand_slots[j]["card"] = card 
        print(f"{self.name}: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É–∫—É:", card.name)  
        await self.view.show_cards(self)

    def accept_card(self, card: Card, sender: "Player"):
        self.hand.append(card)
        card.on_accepted(self, sender)
        return

    def print_log(self, msg, last=False):
        pass

    def play_card(self, card: Card, target=None):
        """
        –ï—Å–ª–∏ —Ü–µ–ª–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞
        –ï—Å–ª–∏ —Ü–µ–ª—å –∏–≥—Ä–æ–∫ - –∏–≥—Ä–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ
        """
        assert target is None or target.__class__.__name__ == "Player"
        self.local_log[-1] = f"‚ñ∂Ô∏è —Å—ã–≥—Ä–∞–Ω–∞ `{card.name}`"
        self.global_log[-1] = f"‚ñ∂Ô∏è –°—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É `{card.name}`"
        print(f"{self.name} —Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É {card.name}")

        if target.__class__.__name__ == "Player" and Card.PLAY_PERSON in card.__dict__:
            card.on_played_to_person(self, target)



    def play_panic(self, card: Card):
        self.local_log.append(f"üî• –ø–∞–Ω–∏–∫–∞ `{card.name}` —Å –∫–æ–ª–æ–¥—ã, —Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        self.global_log.append(f"üî• –í—ã—Ç—è–Ω—É–ª –ø–∞–Ω–∏–∫—É `{card.name}` —Å –∫–æ–ª–æ–¥—ã. –•–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.")        
        print("–ê–≤—Ç–æ–º–∞—Ç–æ–º –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞–Ω–∏–∫–∏:", card.name)

    def choose_card(self, reason):
        pass

    # def swap_cards(self, card: Card, receiver: "Player"):
    #     # –õ—é–¥–∏ –Ω–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
    #     # assert not (sender.side == Player.GOOD and card_sender.role == Card.ROLE_INFECTION)
    #     # assert not (receiver.side == Player.GOOD and card_receiver.role == Card.ROLE_INFECTION)
    #     # # –ó–∞—Ä–∞–∂–µ–Ω–Ω—ã–π –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∏–ª–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–º—É (—Ç–æ–ª—å–∫–æ –ù–µ—á—Ç–æ –º–æ–∂–µ—Ç)
    #     # assert not (sender.side == Player.BAD and card_sender.role == Card.ROLE_INFECTION and receiver.side in [Player.GOOD, Player.BAD])
    #     # assert not (receiver.side == Player.BAD and card_receiver.role == Card.ROLE_INFECTION and sender.side in [Player.GOOD, Player.BAD])

    #     # if sender.side==Player.EVIL and card_sender.role == Card.ROLE_INFECTION:
    #     #     receiver.side = Player.BAD
    #     #     print(f"–ò–≥—Ä–æ–∫ {receiver.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")

    #     # if receiver.side==Player.EVIL and card_receiver.role == Card.ROLE_INFECTION:
    #     #     sender.side = Player.BAD
    #     #     print(f"–ò–≥—Ä–æ–∫ {sender.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")  

    #     # sender.hand.append(card_receiver)
    #     # receiver.hand.append(card_sender) 
    #     his_possible = receiver.get_possible_give(self)
    #     his_choice_uuid = random.choice(his_possible)
    #     his_card = receiver.hand.pop(receiver.search_card_index(his_choice_uuid))

    #     self.accept_card(his_card, receiver)
    #     receiver.accept_card(card, self)        
    #     print(f"–í—ã –¥–∞–ª–∏ –∫–∞—Ä—Ç—É: {card.name}, –∞ –ø–æ–ª—É—á–∏–ª–∏ {his_card.name}")

    def drop_card(self, card: Card):
        self.local_log[-1] = f"üóë —Å–±—Ä–æ—à–µ–Ω–∞ `{card.name}`"   
        self.global_log[-1] = f"üóë –°–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É"
        self.board.deck.append(card)
        print(f"–ö–∞—Ä—Ç–∞ {card.name} –ø–æ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥—É")