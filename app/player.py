from app.card import Card
# import inspect
# from board import Board
# import random
# from emoji import emojize


class Player:
    """
    """

    # Player side CONSTS
    GOOD = 0
    EVIL = 1
    BAD = 2   

    def __init__(self, hand, board, player_info: dict):
        self.title_message_id = None
        self.table_message_id = None
        self.panel_message_id = None
        self.hand_slots = []
        self.log_message_id = None
        self.global_log = []
        self.local_log = []

        self.user_id = player_info["user_id"]
        self.group_chat_id = player_info["group_chat_id"]
        self.name = player_info["user_fullname"]
        self.user_fullname = player_info["user_fullname"]
        self.user_alert = player_info["user_alert"] 
        self.uuid = str(player_info["user_id"]) + str(player_info["group_chat_id"]) + self.user_alert
        self.hand = hand
        self.board = board
        self.side = Player.GOOD
        self.update_player_side()
        self.avatar = "üò∫"
        self.set_avatar()

    def __repr__(self):
        return "<Player: %s, user_id=%s, uuid=%s>" % (self.user_fullname, self.user_id, self.uuid)  # self.__dict__           

    def set_avatar(self):
        avatars = {
            "Yulia Reznikova": "üë©",
            "–î–∂–∞–º—à–∏–¥ –î–∂—É—Ä–∞–µ–≤": "üë±Ô∏è",
            "Anton Mozgovoy": "üë®",
            "Tanya Tanya": "üë©",
            "–ú–∞—Ä—Å–µ–ª—å –ì–∏–∑–∑–∞—Ç–æ–≤": "üë®",
            "Sergey Saltovskiy": "üë®",
            "Zair Ognev": "üë®",
            "Olga Deribo": "üë©", 
            "–î–º–∏—Ç—Ä–∏–π –ö–∞–ª–µ–∫–∏–Ω": "üë®",
            "Igor": "üë®",
            "–ê–Ω—Ç–æ–Ω –ú–∞–∫–∞—Ä–æ—á–∫–∏–Ω": "üë®",
            "Sergey Evseenko": "üë®",
            "Zag": "üë®",
            "–ê–Ω—Ç–æ–Ω –ê—Ä—Ç—é–∫–æ–≤": "üë®",
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏—Ü–∞–π": "üë∂",
            "Dmitriy Zaytsev": "üë®"
        }
        ava = avatars.get(self.user_fullname, "üò∫")
        if self.side == Player.EVIL:
            ava = "üëæ"
        self.avatar = ava
        return
        
    def update_player_side(self):
        for c in self.hand:
            if c.is_evil():
                self.side = Player.EVIL

    def get_cards_names(self):
        return [c.name for c in self.hand]

    def get_possible_play(self):
        result = []
        for c in self.hand:
            if c.is_playable() and c.role not in [_.role for _ in result]:
                result.append(c)
        return result

    def cnt_infection(self):
        cnt = 0
        for c in self.hand:
            if c.is_infection():
                cnt += 1
        return cnt

    def is_fully_infected(self):
        kill_em = True
        for c in self.hand:
            if not c.is_infection():
                kill_em = False
                break
        return kill_em

    def get_possible_drop(self):
        result = []
        print("============ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—Ä–æ–ø ........")
        print(f"{self.name}:", self.is_infected())
        for c in self.hand:
            print("–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:", c.name)
            # –∏–º–µ–Ω–Ω–æ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–ª—å–∑—è —Å–∫–∏–¥—ã–≤–∞—Ç—å - —Ç.–µ. –æ–¥–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ —Ä—É–∫–µ
            if self.is_infected() and self.cnt_infection() == 1 and c.is_infection():
                print("–ó–∞—Ä–∞–∂–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–∂–µ–Ω–∏–π = 1, –∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—è")
                continue
            if c.role not in [*[_.role for _ in result], Card.ROLE_EVIL]:
                result.append(c)
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–∫–∏–¥—ã–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        # —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Ä—É–∫–µ - –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
        if not self.is_evil() and len(self.hand) == 5 and self.cnt_infection() == 4:
            return [next(c for c in result if c.is_infection())]
        return result        

    def get_possible_give(self, receiver: "Player"):
        wrong_cards = [Card.ROLE_EVIL]
        if self.is_good():
            wrong_cards.append(Card.ROLE_INFECTION)
        if self.is_infected() and not receiver.is_evil():
            wrong_cards.append(Card.ROLE_INFECTION)
        if self.is_infected() and receiver.is_evil() and self.cnt_infection() == 1:
            wrong_cards.append(Card.ROLE_INFECTION)

        result = []
        for c in self.hand:
            if c.role not in [*[_.role for _ in result], *wrong_cards]:
                result.append(c)               
        return result

    def get_possible_block_exchange(self):
        result = []
        for c in self.hand:
            if c.role not in [_.role for _ in result] and c.is_def_exchange():
                result.append(c)               
        return result

    def search_card_index(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                return i
        # raise Warning(f"Card with index {uuid} not found in hand of {self.name}")
        return None

    def get_card_by_uuid(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                return c
        return None

    def pop_card_by_uuid(self, uuid):
        for i, c in enumerate(self.hand):
            if c.uuid == uuid:
                # for j, s in enumerate(self.hand_slots):
                #     if s["card"] and s["card"].uuid == c.uuid:
                #         assert type(s["card"]) == Card
                #         self.hand_slots[j]["card"] = None
                return self.hand.pop(i)
        return None        

    def is_good(self):
        return self.side == Player.GOOD

    def is_evil(self):
        return self.side == Player.EVIL

    def is_infected(self):
        return self.side == Player.BAD 

    def become_infected(self):
        print(f"{self.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")
        self.side = Player.BAD       

    def become_evil(self):
        self.side = Player.EVIL

    def pull_deck(self) -> Card:
        return self.board.deck.pop(0)   

    def take_on_hand(self, card, sender=None):
        self.hand.append(card)

        if sender and sender.is_evil() and card.role == Card.ROLE_INFECTION and not self.is_evil():
            self.become_infected()
        # for j, s in enumerate(self.hand_slots):
        #     if not s["card"]:
        #         self.hand_slots[j]["card"] = card 
        print("–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É–∫—É:", card.name)  

    def accept_card(self, card: Card, sender: "Player"):
        self.hand.append(card)
        card.on_accepted(self, sender)
        return

    def print_log(self, msg, last=False):
        pass

    def play_card(self, card: Card, target=None):
        """
        –ï—Å–ª–∏ —Ü–µ–ª–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞
        –ï—Å–ª–∏ —Ü–µ–ª—å –∏–≥—Ä–æ–∫ - –∏–≥—Ä–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ
        """
        assert target is None or target.__class__.__name__ == "Player"
        print(f"–í—ã —Å—ã–≥—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É {card.name}")

    def play_panic(self, card: Card):
        print("–ê–≤—Ç–æ–º–∞—Ç–æ–º –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞–Ω–∏–∫–∏:", card.name)

    def choose_card(self, reason):
        pass

    # def swap_cards(self, card: Card, receiver: "Player"):
    #     # –õ—é–¥–∏ –Ω–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
    #     # assert not (sender.side == Player.GOOD and card_sender.role == Card.ROLE_INFECTION)
    #     # assert not (receiver.side == Player.GOOD and card_receiver.role == Card.ROLE_INFECTION)
    #     # # –ó–∞—Ä–∞–∂–µ–Ω–Ω—ã–π –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∏–ª–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–º—É (—Ç–æ–ª—å–∫–æ –ù–µ—á—Ç–æ –º–æ–∂–µ—Ç)
    #     # assert not (sender.side == Player.BAD and card_sender.role == Card.ROLE_INFECTION and receiver.side in [Player.GOOD, Player.BAD])
    #     # assert not (receiver.side == Player.BAD and card_receiver.role == Card.ROLE_INFECTION and sender.side in [Player.GOOD, Player.BAD])

    #     # if sender.side==Player.EVIL and card_sender.role == Card.ROLE_INFECTION:
    #     #     receiver.side = Player.BAD
    #     #     print(f"–ò–≥—Ä–æ–∫ {receiver.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")

    #     # if receiver.side==Player.EVIL and card_receiver.role == Card.ROLE_INFECTION:
    #     #     sender.side = Player.BAD
    #     #     print(f"–ò–≥—Ä–æ–∫ {sender.name} –∑–∞—Ä–∞–∑–∏–ª—Å—è")  

    #     # sender.hand.append(card_receiver)
    #     # receiver.hand.append(card_sender) 
    #     his_possible = receiver.get_possible_give(self)
    #     his_choice_uuid = random.choice(his_possible)
    #     his_card = receiver.hand.pop(receiver.search_card_index(his_choice_uuid))

    #     self.accept_card(his_card, receiver)
    #     receiver.accept_card(card, self)        
    #     print(f"–í—ã –¥–∞–ª–∏ –∫–∞—Ä—Ç—É: {card.name}, –∞ –ø–æ–ª—É—á–∏–ª–∏ {his_card.name}")

    def drop_card(self, card: Card):
        self.board.deck.append(card)
        print(f"–ö–∞—Ä—Ç–∞ {card.name} –ø–æ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥—É")