import random
from game.player import Player
from game.card import Card
from game.misc import chunks
from decks.deck_normal import card_deck_struct
import asyncio


# def clear(): 
#     from os import system, name
#     if name == 'nt': 
#         _ = system('cls') 
#     else:
#         _ = system('clear')

class Games:
    def __init__(self, app):
        self.app = app
        self._storage = dict()

    def get_game(self, chat_id: int) -> "Game":
        if chat_id < 0:
            cur_game = self._storage.get(chat_id, None)
            if not cur_game:
                self._storage[chat_id] = Game(chat_id, self.app)
            return self._storage[chat_id]
        else:
            print("–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∏–≥—Ä—É –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞")
            


class Game:
    MIN_PLAYERS = 4
    STATUS_PENDING = "pending"
    STATUS_LAUNCHED = "launched"
    STATUS_CANCELED = "canceled"

    def __init__(self, chat_id, app):
        self.chat_id = chat_id
        self.players = []
        self.status = Game.STATUS_PENDING
        self.board = None
        self.app = app
        self.events_invoker = app["events_invoker"]

    def add_player(self, player_id):
        if player_id not in self.players:
            self.players.append(player_id)

    def can_start(self) -> bool:
        return len(self.players) >= Game.MIN_PLAYERS

    def create_board(self):
        mock_players = self.players
        # TODO: delete this mock

        mock_players = [
            {
                "chat_id": -272083086,
                "usr_id": 435627225,
                "usr_fullname": "–î–º–∏—Ç—Ä–∏–π –ö–∞–ª–µ–∫–∏–Ω",
                "usr_alert": "@herr_horror –î–º–∏—Ç—Ä–∏–π"
            },
            {
                "chat_id": -272083086,
                "usr_id": 435627225,
                "usr_fullname": "Dmitriy Zaytsev",
                "usr_alert": "@1"
            },
            {
                "chat_id": -272083086,
                "usr_id": 435627225,
                "usr_fullname": "Zag",
                "usr_alert": "@2"
            },
            {
                "chat_id": -272083086,
                "usr_id": 435627225,
                "usr_fullname": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏—Ü–∞–π",
                "usr_alert": "@3"
            }                                     
        ]
        self.board = Board(mock_players)

    async def phase1(self, p: Player) -> bool:
        """
        –§–∞–∑–∞ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∏ –∏–≥—Ä—ã –ø–∞–Ω–∏–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–¥
        """
        await self.events_invoker.print(self.chat_id, f"–§–∞–∑–∞ 1. {p.usr_fullname} —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É —Å –∫–æ–ª–æ–¥—ã")
        card = p.pull_deck()
        if not card.is_panic():
            p.take_on_hand(card)
            await self.events_invoker.print(self.chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É–∫—É –∫–∞—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {card.name}. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å.")
            await self.events_invoker.show_cards(p)
            return True
        else:
            await self.events_invoker.print(self.chat_id, f"–í—ã—Ç—è–Ω—É—Ç–∞ –∫–∞—Ä—Ç–∞ –ø–∞–Ω–∏–∫–∏ {card.name}. –í—Å–µ –∑–∞–±–µ–≥–∞–ª–∏")
            p.play_panic(card)
            self.board.deck.append(card)  # –∫–∞—Ä—Ç–∞ –ø–∞–Ω–∏–∫–∏ —É—à–ª–∞ –≤ –∫–æ–ª–æ–¥—É
            return False
        return True

    async def phase2(self, p: Player):
        """
        –§–∞–∑–∞ —Å–±—Ä–æ—Å–∞ –∏–ª–∏ –∏–≥—Ä—ã –∫–∞—Ä—Ç—ã —Å —Ä—É–∫–∏
        """
        # –û–±–Ω–æ–≤–∏–ª–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞ –∏ –∂–¥—ë–º –æ—Ç –Ω–µ–≥–æ —Ö–æ–¥–∞
        await self.events_invoker.show_cards(p)
        decision = await self.events_invoker.show_play_drop_options(p)

        cmd = None
        while cmd not in ["phase2:play_card", "phase2:drop_card"]:
            cmd = await self.events_invoker.input(self.chat_id, "–§–∞–∑–∞ 2. –ò–≥—Ä–∞–π—Ç–µ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –∫–∞—Ä—Ç—É") 
        
        if cmd == "p":
            possible = p.get_possible_play()
        elif cmd == "d":
            possible = p.get_possible_drop()
        
        indices = []
        for i, c in enumerate(p.hand):
            if c.uuid not in possible:
                continue
            await self.events_invoker.print(self.chat_id, f"{i} {c.name}")
            indices.append(str(i))
        card_index = None
        while card_index not in indices:
            card_index = await self.events_invoker.input(p.usr_id, f"–ö–∞–∫—É—é –∫–∞—Ä—Ç—É? {indices} >>> ")

        card = p.hand.pop(int(card_index))  # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
        if cmd == "p":
            p.play_card(card, target=None)
        p.drop_card(card)  # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤ –∫–æ–ª–æ–¥—É
        return

    async def phase3(self, p: Player):
        await self.events_invoker.print(self.chat_id, "–§–∞–∑–∞ 3. –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–≥—Ä–æ–∫–æ–º")
        next_player = self.board.player_next()
        possible = p.get_possible_give(next_player)
        indices = []
        for i, c in enumerate(p.hand):
            if c.uuid not in possible:
                continue
            await self.events_invoker.print(f"{i} {c.name}")
            indices.append(str(i))
        card_index = None
        while card_index not in indices:
            card_index = await self.events_invoker.input(p.usr_id, f"–ö–∞–∫—É—é –∫–∞—Ä—Ç—É –¥–∞—ë–º –µ–º—É? {indices} >>> ")
        my_card = p.hand.pop(int(card_index))  # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞      
        p.swap_cards(my_card, next_player)
        return

    async def run(self):
        # –î–æ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º, –ø–∏—à–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∂–¥—ë–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–æ—á–∏—Ç–∞–ª–∏
        await self.events_invoker.update_players_hands(self.board.players)
        await self.events_invoker.print(self.chat_id, "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã: –∫–∞–∫ –≤—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ —Ç–∞–∫–æ–≤–∞...\n–ú–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...")
        await asyncio.sleep(5)

        while not self.board.is_end:
            self.board.next_turn()
            p = self.board.current_player()
            # –†–∏—Å—É–µ–º —Å—Ç–æ–ª –∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–º —á–∞—Ç–µ
            await self.events_invoker.print(self.chat_id, self.board.print_hands())
            # –¢—è–Ω–µ–º –∫–∞—Ä—Ç—É: –ª–∏–±–æ –ø–∞–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞, –ª–∏–±–æ —Ñ–∞–∑–∞ —Å—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É —Å —Ä—É–∫–∏
            if not await self.phase1(p):
                await self.events_invoker.print(self.chat_id, f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É")
                continue
            await self.phase2(p)
            await self.phase3(p)
        await self.events_invoker.print("game ended")
        return


class Board:
    """
    """
    CARDS_ON_HAND = 4   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –Ω–∞ —Ä—É–∫–µ —É –∏–≥—Ä–æ–∫–∞

    def __init__(self, list_players: list):
        n = len(list_players)
        assert n >= 4
        self.n = n
        self.players = []
        self._cards = self.load_cards(card_deck_struct, n)
        init_hands, self.deck = self.split_deck(self._cards, n)
        for i, hand in enumerate(init_hands):
            self.players.append(Player(hand, self, list_players[i]))
        
        random.shuffle(self.players)
        self.turn = -1  # –ß—å—è –æ—á–µ—Ä–µ–¥—å. –ü–æ–∫–∞ –Ω–∏—á—å—è
        self.move = 0   # –ù–æ–º–µ—Ä —Ö–æ–¥—è –ø–æ –ø–æ—Ä—è–¥–∫—É
        self.is_end = False
        self.turn_sequence = 1  # -1

    def get_player(self, uuid):
        for u in self.players:
            if u.uuid == uuid:
                return u

    async def update_players_hands(self):
        pass
        # for i, p in enumerate(self.players):

    def print_hands(self):
        output = f"–•–æ–¥ {self.move}, —Ö–æ–¥–∏—Ç {self.current_player().usr_fullname} \r\n"
        for i, p in enumerate(self.players):
            turn = "‚úîÔ∏è" if i == self.turn else ""
            # output += "```"
            output += f"{p.avatar} {p.name}({len(p.hand)}) {turn}\r\n" 
            # output += "```"            
            for o in p.get_cards_names():
                if o == "–ó–∞—Ä–∞–∂–µ–Ω–∏–µ":
                    output += "`[`ü§¢`" + o + "]`; "                                    
                if o == "–ù–µ—á—Ç–æ":
                    output += "`[`üçÑ`" + o + "]`; "
                else:
                    output += "`[" + o + "]`; "
            output += "\r\n"
        return output

    def current_player(self) -> Player:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        """
        return self.players[self.turn]
    
    def player_before(self):
        if self.turn-1 < 0:
            return self.players[:-1]
        return self.players[self.turn-1]

    def player_after(self):
        if self.turn+1 > len(self.players)-1:
            return self.players[0]
        return self.players[self.turn+1]
    
    def player_next(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        """
        index = self.turn + self.turn_sequence
        if index > len(self.players)-1:
            index = 0
        if index < 0:
            index = len(self.players)-1 
        return self.players[index]
    
    def next_turn(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        """
        self.turn += self.turn_sequence
        if self.turn > len(self.players)-1:
            self.turn = 0
        if self.turn < 0:
            self.turn = len(self.players)-1        
        self.move += 1
        
    def load_cards(self, card_deck_struct, n):
        """
        –î–µ–ª–∞–µ—Ç –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–æ–ª–æ–¥—É
        –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –≤–µ—Ä–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        –í –∫–æ–Ω—Ü–µ —Å–º–æ—Ç—Ä–∏—Ç, –Ω–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–¥—É
        """
        cards = []
        for c in card_deck_struct:
            if not isinstance(c["_uuids"], list):
                raise TypeError("Type error " + c["name"])
            if len(c["_uuids"]) == 0:
                raise IndexError("Index error: " + c["name"])
            if len(c["_uuids"]) != len(c["_players"]):
                raise IndexError("Index error: len_index!=len " + c["name"])
            index = c["_uuids"][0]
            for i, subcard_index in enumerate(c["_uuids"]):
                if i+index != subcard_index:
                    raise IndexError("Skipped index: " + c["name"])
                # –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –Ω–∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                if c["_players"][i] > n:
                    continue    
                cards.append(Card({
                    "uuid": subcard_index,
                    "players": c["_players"][i],
                    ** {k: v for k, v in c.items() if k not in ["_uuids", "_players"]}
                }))
        return cards

    def split_deck(self, cards, n):
        """
        –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ä—É–∫ N –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Å—Ç–∞–ª—å–Ω—É—é –∫—É—á—É
        –ö–∞—Ä—Ç—É –ù–ï–ß–¢–û –∫–ª–∞–¥—ë–≤ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä—É–∫–∏
        –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å N*4-1 –∫–∞—Ä—Ç —Å–æ–±—ã—Ç–∏–π, –±–µ–∑ –∑–∞—Ä–∞–∂–µ–Ω–∏—è (—É–¥–∞–ª—è–µ–º –ø–∞–Ω–∏–∫—É –∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ)
        –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ –∫—É—á–∏. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ä—É–∫—É –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Å–º–µ—à–∏–≤–∞–µ–º.
        """
        assert n >= 4
        start_hands = [cards.pop(0)]  # The thing card
        infection_panic = []
        normal_cards = []
        for c in cards:
            if c.is_panic() or c.is_infection():
                infection_panic.append(c)
            else:
                normal_cards.append(c)
        random.shuffle(infection_panic)  # –ö—É—á–∞ —Å –ø–∞–Ω–∏–∫–æ–π –∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ–º
        random.shuffle(normal_cards)    # –∫—É—á–∞ —Å–æ–±—ã—Ç–∏–π
        start_hands.extend(normal_cards[:Board.CARDS_ON_HAND*n-1])    # –æ—Ç–±–∏—Ä–∞–µ–º –µ—â–µ N*4-1 –∫–∞—Ä—Ç –¥–ª—è —Ä—É–∫ (–ù–ï–ß–¢–û —É–∂–µ —Ç–∞–º –ª–µ–∂–∏—Ç)
        del normal_cards[:Board.CARDS_ON_HAND*n-1]    # —É–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–ª–æ–¥—ã - –æ–Ω–∏ —É—à–ª–∏ –¥–ª—è —Ä—É–∫
        random.shuffle(start_hands)         # —Ç–∞—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –¥–ª—è —Ä—É–∫
        second_heap = list([*normal_cards, *infection_panic])   # –û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–æ–ª–æ–¥–∞: –∏–∑ –∫–∞—Ä—Ç –ø–∞–Ω–∏–∫–∏, –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö
        random.shuffle(second_heap)     # —Ç–∞—Å—É–µ–º –∫—É—á—É
        return chunks(start_hands, Board.CARDS_ON_HAND), second_heap 

# def init_hands(self):
#     start_deck = set_card_deck(card_deck_struct, 4)
#     print(len(start_deck))
#     hands, newdeck = deal_start_cards(start_deck, 4)
#     print(len(hands), len(newdeck))
#     pprint(hands)    